import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven {
        name = "ldtteam"
        url = "https://maven.parchmentmc.net/"
    }
}

archivesBaseName = archives_base_name

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.mc_ver}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.17.1:2021.07.26-nightly-SNAPSHOT@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"



    shade project(":common")
    implementation(project(":common"))
}

minecraft {
    accessWidenerPath = file("src/main/resources/MOD_IDH_HERE.accesswidener")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": rootProject.version
    }

}

//tasks.processResources.dependsOn(project(":shared").tasks.processResources)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

shadowJar {
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-dev.jar"
    configurations = [project.configurations.shade]
    relocate 'dependants/platform', 'data/c'
    exclude 'loom.*'
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    remapAccessWidener = true
    addNestedDependencies = true
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-${rootProject.version}.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}